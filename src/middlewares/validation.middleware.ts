import { type RequestHandler } from "express";
import { type ZodError, type ZodSchema } from "zod";
import { BadRequestError, ValidationError } from "../utils/error";

export declare type RequestValidation<TParams, TQuery, TBody> = {
  params?: ZodSchema<TParams>;
  query?: ZodSchema<TQuery>;
  body?: ZodSchema<TBody>;
  user?: {
    id: string;
  };
};

/**
 * Convert Zod flatten errors to errorList. errorList will be wrapped by RequestError exception.
 * @param fieldErrors - Errors returned by Zod.
 * @returns errorList - Generated errorList from Zod flatten errors.
 */
const convertToErrorList = (fieldErrors: ZodError) => {
  const errorList: ValidationError[] = [];

  fieldErrors.errors.forEach((error) => {
    const { path, message, code } = error;

    errorList.push({
      type: code,
      param: path.join("."),
      message,
    });
  });

  return errorList;
};

/**
 * Add Zod errors into errorList.
 * @param errorList - The list of errors where new elements will be `concat`.
 * @param parsedError - Error generated by the Zod parser.
 * @returns errorList - The result after adding new elements from Zod parser Error.
 */
const concatErrors = (errorList: ValidationError[], parsedError: ZodError) => {
  const parsedErrorList = convertToErrorList(parsedError);

  return errorList.concat(parsedErrorList);
};

/**
 * Validate incoming request.
 * @param schemas - Zod schema.
 * @returns handler - Return Express JS handler.
 */
export const validateRequest: <TParams = any, TQuery = any, TBody = any>(
  schemas: RequestValidation<TParams, TQuery, TBody>
) => RequestHandler<TParams, any, TBody, TQuery> =
  ({ params, query, body }) =>
  (req, _res, next) => {
    let errorList: ValidationError[] = [];

    // Parse Express JS Params
    if (params) {
      const parsed = params.safeParse(req.params);

      if (!parsed.success) {
        errorList = concatErrors(errorList, parsed.error);
      }
    }

    // Parse Express JS Query
    if (query) {
      const parsed = query.safeParse(req.query);

      if (!parsed.success) {
        errorList = concatErrors(errorList, parsed.error);
      }
    }

    // Parse Express JS Body
    if (body) {
      const parsed = body.safeParse(req.body);

      if (!parsed.success) {
        errorList = concatErrors(errorList, parsed.error);
      }
    }

    // errorList should be empty. Otherwise, it means the incoming don't respect the expecting zod schema.
    if (errorList.length) {
      throw new BadRequestError("Validation Error", errorList);
    }

    return next();
  };
